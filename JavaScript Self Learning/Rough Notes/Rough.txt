Js me 5 Scope hote he. 
                            Block Scope
                            Function Ya Local Scope
                            Global Scope
                            Script Scope Kisi Ek file mwe let ya const ka use kar bane variable ko  kisi 2sri file access me karte he.
                            Module Scope Kisi file ko mudule banate he tb ye scope action me aata he.

Use scrtict mode ki limitation kya he ya wo kya kya kar sakta he.



js is datatype less pro lang
js is loosely typed lang
js is case sansitive lang
variable k scope or liftime ko define karne k liye let var const
variable ko constatnt banane k liye const 
Js empty file pr main function hide hokar chal rha hota he

scope 
hoisting
mutability = changes are allowed      var
immutability = changes are not allowed    

var allowed both redeclaration and reassignment

let not allowed redeclaration but allow only  reassignment. and when we reassign value not use let keyword.
use only variable name. becoz let typecast with var when we reassign value in let.

const not allowed both redeclaration and reassignment

variable var k sath  typecast ho jata he jab let ki help se bana variable reassign hota he 

var function scope
let and const  block scope { }



var a=5;
function inner(){
    clg(a)
    let a=4;
    var a = 4;
    const a = 4
}
inner();


function hoisting not  allow in function expression

callback: jab function overloading karwani ho tb callback use karte he.

CallBack Hell
Promises  Panding resolve reject
async await 


Promises:

Event loop
    Stack 
    Queue fifo

async await :

const function1 = ()=>{
    setTimeOut(()=>{
        clg("Hello")
    });
};


const functionName = async () =>{
    await function1();
    await function1();
    await function1();
    await function1();
}



Promises ====> pending resolve reject

const getdata = async () =>{
    try{
        const response = await fetch("URL);
        datas = await response.json();
        console.log(datas);
    }catch (error){
        clg(error);
    }
    };
const main = async()=>{
    await getdata();
};
main();